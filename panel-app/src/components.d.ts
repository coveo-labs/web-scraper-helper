/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Selector } from "./components/store";
export { Selector } from "./components/store";
export namespace Components {
    interface AppRoot {
    }
    interface CodeViewer {
    }
    interface CreateConfig {
        "fileName": string;
        "triggerType": 'new-file' | 'load-file';
    }
    interface FileExplorer {
    }
    interface MetadataResults {
        "metadata": any;
        "parentSelector": any;
        "type": string;
    }
    interface SelectElementItem {
        "name": string;
        "selector": Selector;
        "type": string;
        "uniqueId": string;
    }
    interface SubItemInputElement {
        "name": string;
        "selector": Selector;
        "type": 'metadataItem' | 'subItem' | 'excludeItem';
        "uniqueId": string;
    }
    interface SubitemEditConfig {
        "subItem": {};
    }
}
export interface SubItemInputElementCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSubItemInputElementElement;
}
export interface SubitemEditConfigCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLSubitemEditConfigElement;
}
declare global {
    interface HTMLAppRootElement extends Components.AppRoot, HTMLStencilElement {
    }
    var HTMLAppRootElement: {
        prototype: HTMLAppRootElement;
        new (): HTMLAppRootElement;
    };
    interface HTMLCodeViewerElement extends Components.CodeViewer, HTMLStencilElement {
    }
    var HTMLCodeViewerElement: {
        prototype: HTMLCodeViewerElement;
        new (): HTMLCodeViewerElement;
    };
    interface HTMLCreateConfigElement extends Components.CreateConfig, HTMLStencilElement {
    }
    var HTMLCreateConfigElement: {
        prototype: HTMLCreateConfigElement;
        new (): HTMLCreateConfigElement;
    };
    interface HTMLFileExplorerElement extends Components.FileExplorer, HTMLStencilElement {
    }
    var HTMLFileExplorerElement: {
        prototype: HTMLFileExplorerElement;
        new (): HTMLFileExplorerElement;
    };
    interface HTMLMetadataResultsElement extends Components.MetadataResults, HTMLStencilElement {
    }
    var HTMLMetadataResultsElement: {
        prototype: HTMLMetadataResultsElement;
        new (): HTMLMetadataResultsElement;
    };
    interface HTMLSelectElementItemElement extends Components.SelectElementItem, HTMLStencilElement {
    }
    var HTMLSelectElementItemElement: {
        prototype: HTMLSelectElementItemElement;
        new (): HTMLSelectElementItemElement;
    };
    interface HTMLSubItemInputElementElementEventMap {
        "updateSubItem": any;
    }
    interface HTMLSubItemInputElementElement extends Components.SubItemInputElement, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSubItemInputElementElementEventMap>(type: K, listener: (this: HTMLSubItemInputElementElement, ev: SubItemInputElementCustomEvent<HTMLSubItemInputElementElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSubItemInputElementElementEventMap>(type: K, listener: (this: HTMLSubItemInputElementElement, ev: SubItemInputElementCustomEvent<HTMLSubItemInputElementElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSubItemInputElementElement: {
        prototype: HTMLSubItemInputElementElement;
        new (): HTMLSubItemInputElementElement;
    };
    interface HTMLSubitemEditConfigElementEventMap {
        "updateSubItemState": any;
    }
    interface HTMLSubitemEditConfigElement extends Components.SubitemEditConfig, HTMLStencilElement {
        addEventListener<K extends keyof HTMLSubitemEditConfigElementEventMap>(type: K, listener: (this: HTMLSubitemEditConfigElement, ev: SubitemEditConfigCustomEvent<HTMLSubitemEditConfigElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLSubitemEditConfigElementEventMap>(type: K, listener: (this: HTMLSubitemEditConfigElement, ev: SubitemEditConfigCustomEvent<HTMLSubitemEditConfigElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLSubitemEditConfigElement: {
        prototype: HTMLSubitemEditConfigElement;
        new (): HTMLSubitemEditConfigElement;
    };
    interface HTMLElementTagNameMap {
        "app-root": HTMLAppRootElement;
        "code-viewer": HTMLCodeViewerElement;
        "create-config": HTMLCreateConfigElement;
        "file-explorer": HTMLFileExplorerElement;
        "metadata-results": HTMLMetadataResultsElement;
        "select-element-item": HTMLSelectElementItemElement;
        "sub-item-input-element": HTMLSubItemInputElementElement;
        "subitem-edit-config": HTMLSubitemEditConfigElement;
    }
}
declare namespace LocalJSX {
    interface AppRoot {
    }
    interface CodeViewer {
    }
    interface CreateConfig {
        "fileName"?: string;
        "triggerType"?: 'new-file' | 'load-file';
    }
    interface FileExplorer {
    }
    interface MetadataResults {
        "metadata"?: any;
        "parentSelector"?: any;
        "type"?: string;
    }
    interface SelectElementItem {
        "name"?: string;
        "selector"?: Selector;
        "type"?: string;
        "uniqueId"?: string;
    }
    interface SubItemInputElement {
        "name"?: string;
        "onUpdateSubItem"?: (event: SubItemInputElementCustomEvent<any>) => void;
        "selector"?: Selector;
        "type"?: 'metadataItem' | 'subItem' | 'excludeItem';
        "uniqueId"?: string;
    }
    interface SubitemEditConfig {
        "onUpdateSubItemState"?: (event: SubitemEditConfigCustomEvent<any>) => void;
        "subItem"?: {};
    }
    interface IntrinsicElements {
        "app-root": AppRoot;
        "code-viewer": CodeViewer;
        "create-config": CreateConfig;
        "file-explorer": FileExplorer;
        "metadata-results": MetadataResults;
        "select-element-item": SelectElementItem;
        "sub-item-input-element": SubItemInputElement;
        "subitem-edit-config": SubitemEditConfig;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "app-root": LocalJSX.AppRoot & JSXBase.HTMLAttributes<HTMLAppRootElement>;
            "code-viewer": LocalJSX.CodeViewer & JSXBase.HTMLAttributes<HTMLCodeViewerElement>;
            "create-config": LocalJSX.CreateConfig & JSXBase.HTMLAttributes<HTMLCreateConfigElement>;
            "file-explorer": LocalJSX.FileExplorer & JSXBase.HTMLAttributes<HTMLFileExplorerElement>;
            "metadata-results": LocalJSX.MetadataResults & JSXBase.HTMLAttributes<HTMLMetadataResultsElement>;
            "select-element-item": LocalJSX.SelectElementItem & JSXBase.HTMLAttributes<HTMLSelectElementItemElement>;
            "sub-item-input-element": LocalJSX.SubItemInputElement & JSXBase.HTMLAttributes<HTMLSubItemInputElementElement>;
            "subitem-edit-config": LocalJSX.SubitemEditConfig & JSXBase.HTMLAttributes<HTMLSubitemEditConfigElement>;
        }
    }
}
